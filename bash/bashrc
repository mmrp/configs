# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTfileSIZE in bash(1)
HISTSIZE=1000
HISTfileSIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\n\u@\h\$ '
else
    PS1='\n${debian_chroot:+($debian_chroot)}\[\033[01;32m\][\w]\[\033[00m\]\n\u@\h\$ ' 
#    PS1='${debian_chroot:+($debian_chroot)}PATH:[\w]\n\u@\h\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

function set-title(){
  if [[ -z "$ORIG" ]]; then
    ORIG=$PS1
  fi
  TITLE="\[\e]2;$*\a\]"
  PS1=${ORIG}${TITLE}
}

build_cscope()
{
	find -name "*.[ch]" > cscope.files
	find -name "*.[ch]pp" >> cscope.files
	cscope -b -k -q
}

# Display Git Branch on the Command Prompt 
#
export PATH=$PATH:~/.local/bin
eval "$(fasd --init auto)"

alias ts='t3 console --force -c EUS'
alias tc='t3 console -c CFS'


function gitupdate()
{
	git submodule update --recursive --init
}
function gitdiffu()
{
	file=$1
 	git diff HEAD^..HEAD -U$(wc -l "${file}" | cut -d ' ' -f 1) "${file}"
}

alias gitstat='git diff HEAD^..HEAD --stat'
alias gitdiff='git diff HEAD^..HEAD'
alias gitsdiff='git diff --staged HEAD^'
alias gitlog='git log -p HEAD^..HEAD'
gitadd() {
  git sti|awk '/modified:/{print $2}'|grep -v clang|xargs git add
}

export HOSTALIASES=~/.hosts


find_bazel_targets () {
  r="$(pwd)"
  sed -e "s|$r||g" -e "s|^/\+||g" <(find $(realpath $1) \( -name "BUILD" -o -name "BUILD.bazel" \) -exec grep -H -A 1 $2 {} \; | grep --color=auto -vE "$2|--"|awk '{print $1, $4}'|sed -e 's/\/\(BUILD\|BUILD.bazel\)- \"/:/g' -e 's/[\",]//g'|awk '{printf ""$0"\n"}')

}

ls-test() {
  d=${1:-`pwd`} 
  find_bazel_targets $d cc_test
}

ls-binary() {
  d=${1:-`pwd`} 
  find_bazel_targets $d cc_binary
}

ls-library() {
  d=${1:-`pwd`} 
  find_bazel_targets $d cc_library
}

alias black='black -l 110'
branch-update-devel() {
  git checkout devel
  gitupdate
  git pull
  gitupdate
}

run-clang() {
  pushd $(git rev-parse --show-toplevel)
  cp-clang-file
  #git modfiles|grep -v -f <(git rmfiles)
  if [ ! -z ${1} ]; then  
    clang-format -i $(git modfiles|grep -v -f <(git rmfiles)|grep ${1})
  else
    clang-format -i $(git modfiles|grep -v -f <(git rmfiles))
  fi
  reset-clang-file
  popd
}

count_lines() {
  wc -l $(find ${1} -name "*.[ch]pp")
}

check_bash_names() {
  if [ $# -ne 1 ]; then
      echo "$0 bash_file"
      exit 1
  fi
  v
  cat $1|grep -E "\\$"|grep -Ev "\\$\{" |grep -Ev "\\$\(" |grep -Ev "\\$\?"
}

search-and-replace() {
  if [ $# -ne 2 ]; then
    echo "provide search and replace fields"
    return
  fi
  sed -i "s/$1/$2/g" $(git grep -l "$1"|sort|uniq)
}

 
show-include-file() {
  echo -|gcc -E -include${1} -

}

random-string() {
  echo $(cat /dev/urandom | tr -dc "a-zA-Z0-9" | fold -w 10 | head -n 1)
}

create-shared-tmux-session() {
  socket_name=$(random-string)
  session_name=${socket_name}_$$
  echo "for others to connect use : tmux -S /tmp/${socket_name} attach -t ${session_name}"
  echo "Press entry or another key to start your session"
  read
  tmux -S /tmp/${socket_name} new -s ${session_name}
}

pactl unload-module module-device-manager > /dev/null 2>&1
alias vim=nvim

export LANG=en_US.UTF-8; 
export TERM=screen-256color
alias tmux='tmux -2'
